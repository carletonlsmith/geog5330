paste(system.file(package="dismo"), '/ex' , sep= ''),
paste(system.file(package="dismo"), '/ex' , sep= '')
file
library(sp)
?gridSample
?spsample
?spsample
file.exists(jar)
 jar
file.exists(jar)
file.exists(jar)
file.exists(jar)
file.exists(jar)
install.packages('rJava')
mask
names(pres_train)
names(backg_train)
colnames(backbk)
colnames(backg)
nrow(testpres)
nrow(testbackg)


bradypus
bradypus[,-1]
bradypus
distm
nrow(pres_train)
backg_test
e <- extent(-80, -53, -39, -22)
pres_train
data(package='dismo')
data(acadule)
data(acaule)
acaule
names(acaule)
library(spatstat)
rLGCP()
test=rLGCP()
plot(test)
X <- rLGCP("matern", function(x, y){ 1 - 0.4 * x},
             c(0, variance=2, nugget=0, scale=0.7, a = 0.5),
             win = owin(c(0, 10), c(0, 10)))
X <- rLGCP("matern", function(x, y){ 1 - 0.4 * x},
             c(0, variance=2, nugget=0, scale=0.7, a = 0.5),
X <- rLGCP("matern", function(x, y){ 1 - 0.4 * x},
names(pres_train)
             win = owin(c(0, 10), c(0, 10)))
             
    m <- as.im(function(x, y){5 - 1.5 * (x - 0.5)^2 + 2 * (y - 0.5)^2}, W=owin())
    X <- rLGCP("gauss", m, c(0, variance=0.15, nugget = 0, scale =0.5))
    plot(attr(X, "Lambda"))
    points(X)

X <- rLGCP("matern", function(x, y){ 1 - 0.4 * x},
X <- rLGCP("matern", function(x, y){ 1 - 0.4 * x},





x
X
dev.off()
dev.off()
class(backg_train)
class(as.data.frame(backg_train))
dev.off()
dev.off()
plot(backg_train, pch= ' + ' , cex=1.5, col= ' blue ')
dev.off()
plot(backg_train, pch= ' + ' , cex=1.5, col= ' blue ')
dev.off()
plot(backg_train, pch= ' + ' , cex=1.5, col= ' blue ')
dev.off()
dev.off()
dev.off()
    data(redwood)
data(redwood)
u <- lgcp.estK(redwood, c(sigma2=0.1, alpha=1))
u
plot(u)
?rpoispp
plot(m)
subs = c()
for(i in 1:(length(longrid)-1)){
 for(j in 1:(length(latgrid)-1)){
     gridsq = subset(locs, locs$latitude > latgrid[j] & locs$latitude < latgrid[j+1] & locs$lngitude > longrid[i] & locs$lngitude < longrid[i+1])
for(i in 1:(length(longrid)-1)){
 for(j in 1:(length(latgrid)-1)){
     gridsq = subset(locs, locs$latitude > latgrid[j] & locs$latitude < latgrid[j+1] & locs$lngitude > longrid[i] & locs$lngitude < longrid[i+1])
}}
+ + + + 
for(i in 1:(length(longrid)-1)){
+ + + + 
for(i in 1:(length(longrid)-1)){
+ + + 
+ + + + + + 
+ + + + + + 

+ + + + + + 



hull <- convHull(pres_train, lonlat=TRUE)
length(longrid)
length(latgrid)
subs
?getData
c(locs$lngitude,locs$latitude)

c


locs$lngitude
coordinates(locs)[0]
coordinates(locs)[1]
train_p
clim
str(clim)
rm(list=ls())
rm(list=ls())
install.packages('dismo')
library('dismo')
jar
install.packages('rJava')
files
points(bg2, cex=0.5)
plot(mask)
ge2=evaluate(testpres, testbackg, gm2)
names(ge1)
str(ge1)
points(backg_train, pch= ' + ' , cex=1.5, col= ' yellow ')
backg_test
backg
backg_test
extent(pred_nf)
?randomPoints
backg
p <- rnorm(50, mean=0.7, sd=0.3)
    # b has th,de predicted values for 50 background locations (or absence)
    a <- rnorm(50, mean=0.4, sd=0.4)
    e <- evaluate(p=p, a=a)
seamask
plot(seamask)
q
q()
